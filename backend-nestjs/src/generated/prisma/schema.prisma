// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  phone             String?
  location          String?
  profileImage      String?
  bio               String?
  isServiceProvider Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  quotationRequests QuotationRequest[]
  quotations        Quotation[]
  consultations     Consultation[]
  services          Service[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String
  basePrice   Float
  providerId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  provider          User               @relation(fields: [providerId], references: [id])
  quotationRequests QuotationRequest[]
}

model QuotationRequest {
  id          String        @id @default(cuid())
  userId      String
  serviceId   String
  description String
  budget      Float?
  location    String
  status      RequestStatus @default(PENDING)
  requestedAt DateTime      @default(now())
  respondedAt DateTime?

  user       User        @relation(fields: [userId], references: [id])
  service    Service     @relation(fields: [serviceId], references: [id])
  quotations Quotation[]
}

model Quotation {
  id                String          @id @default(cuid())
  requestId         String
  providerId        String
  price             Float
  description       String
  estimatedDuration String
  status            QuotationStatus @default(SENT)
  validUntil        DateTime?
  createdAt         DateTime        @default(now())

  request       QuotationRequest @relation(fields: [requestId], references: [id])
  provider      User             @relation(fields: [providerId], references: [id])
  consultations Consultation[]
}

model Consultation {
  id            String             @id @default(cuid())
  userId        String
  quotationId   String
  scheduledDate DateTime
  status        ConsultationStatus @default(SCHEDULED)
  notes         String?
  meetingType   String?
  createdAt     DateTime           @default(now())

  quotation Quotation @relation(fields: [quotationId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

enum RequestStatus {
  PENDING
  RESPONDED
  ACCEPTED
  REJECTED
}

enum QuotationStatus {
  SENT
  ACCEPTED
  REJECTED
}

enum ConsultationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
